//Model

Patient.cs
-----------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PatientManagementApp.Model
{
    public class Patient
    {
        public string Name { get; set; }
        public int Age { get; set; }
        //public DateTime DOB { get; set; }
        public string DOB { get; set; }
        public string Address { get; set; }
        public string Slot { get; set; } // Morning or Evening
        public string BookingDate { get; set; }
        //public string AppointmentDate { get; set; }

    }
}



//ViewModel

IPatientViewModel.cs
--------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PatientManagementApp.Model;

namespace PatientManagementApp.ViewModel
{
    public interface IPatientViewModel
    {
        ObservableCollection<Patient> Patients { get; }
        void RegisterPatient(Patient patient);
    }
}


PatientViewModel
---------------------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PatientManagementApp.Model;

namespace PatientManagementApp.ViewModel
{
    public class PatientViewModel : IPatientViewModel
    {
        public ObservableCollection<Patient> Patients { get; } = new ObservableCollection<Patient>();
        public ObservableCollection<Patient> ApprovedAppointments { get; } = new ObservableCollection<Patient>();

        public void RegisterPatient(Patient patient)
        {
            Patients.Add(patient);
            PatientRegistered?.Invoke(this, patient);
        }

        public void ApproveAppointment(Patient patient)
        {
            ApprovedAppointments.Add(patient);
            AppointmentConfirmed?.Invoke(this, patient);
        }

        public event EventHandler<Patient> PatientRegistered;
        public event EventHandler<Patient> AppointmentConfirmed;
    }
}



//Views

AppointmentConfirmation.xaml
------------------------------
<UserControl x:Class="PatientManagementApp.Views.AppointmentConfirmation"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <StackPanel Background="AliceBlue" Width="643" Height="444">
        <TextBlock Text="Appointments to Confirm" FontWeight="Bold" FontSize="16" Margin="10"/>

        <DataGrid Name="PatientsGrid" ItemsSource="{Binding Patients}" AutoGenerateColumns="True" 
                  SelectionMode="Single" Height="229" Margin="10"/>
        <Button x:Name="btnApproveAppointment" Content="Give Appointment" Click="btnApproveAppointment_Click" Width="138" />
    </StackPanel>
</UserControl>



AppointmentConfirmation.xaml.cs
----------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using PatientManagementApp.Model;
using PatientManagementApp.ViewModel;

namespace PatientManagementApp.Views
{
    /// <summary>
    /// Interaction logic for AppointmentConfirmation.xaml
    /// </summary>
    public partial class AppointmentConfirmation : UserControl
    {
        public AppointmentConfirmation()
        {
            InitializeComponent();
        }

        private void btnApproveAppointment_Click(object sender, RoutedEventArgs e)
        {
            if (DataContext is PatientViewModel viewModel && PatientsGrid.SelectedItem is Patient selectedPatient)
            {
                viewModel.ApproveAppointment(selectedPatient);
                MessageBox.Show($"Appointment for {selectedPatient.Name} approved!");
            }
            else
            {
                MessageBox.Show("Please Select patient details");
            }
        }
    }
}



PatientDashboard.xaml
--------------------------
<UserControl x:Class="PatientManagementApp.Views.PatientDashboard"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <StackPanel >
        <TextBlock Text="Approved Appointments" FontWeight="Bold" FontSize="16" Margin="10"/>

        <DataGrid ItemsSource="{Binding ApprovedAppointments}" AutoGenerateColumns="True" Height="200" Margin="10"/>

        <Button x:Name="btnBackToMain" Content="Exit" Click="btnBackToMain_Click" Width="57" HorizontalAlignment="Right"/>
    </StackPanel>
</UserControl>


PatientDashboard.xaml.cs
-----------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace PatientManagementApp.Views
{
    /// <summary>
    /// Interaction logic for PatientDashboard.xaml
    /// </summary>
    public partial class PatientDashboard : UserControl

    {
        public event EventHandler BackToMainRequested;
        public PatientDashboard()
        {
            InitializeComponent();
        }

        private void btnBackToMain_Click(object sender, RoutedEventArgs e)
        {
            BackToMainRequested?.Invoke(this, EventArgs.Empty);
        }
    }
}






PatientRegistration.xaml
-----------------------------
<UserControl x:Class="PatientManagementApp.Views.PatientRegistration"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Grid Width="383">
        <Border HorizontalAlignment="Center" VerticalAlignment="Center" BorderBrush="Gray" BorderThickness="2" Padding="20" Width="363">
            <StackPanel>
                <TextBlock Text="Patient Registration" FontSize="20" FontWeight="Bold" Margin="0,0,0,20" />

                <TextBlock Text="Name:" />
                <TextBox x:Name="NameTextBox" Margin="0,0,0,10" TextChanged="NameTextBox_TextChanged" />
                <TextBlock x:Name="NameErrorTextBlock" Foreground="Red" Visibility="Collapsed" />

                <TextBlock Text="Age:" />
                <TextBox x:Name="AgeTextBox" Margin="0,0,0,10" TextChanged="AgeTextBox_TextChanged" />
                <TextBlock x:Name="AgeErrorTextBlock" Foreground="Red" Visibility="Collapsed" />

                <TextBlock Text="Date of Birth:" />
                <DatePicker x:Name="DOBPicker" SelectedDateChanged="DOBPicker_SelectedDateChanged" Margin="0,0,0,10" />
                <TextBlock x:Name="DOBErrorTextBlock" Foreground="Red" Visibility="Collapsed" />

                <TextBlock Text="Address:" />
                <TextBox x:Name="AddressTextBox" Margin="0,0,0,10" />

                <TextBlock Text="Time Slot:" />
                <ComboBox x:Name="SlotComboBox" Margin="0,0,0,10">
                    <ComboBoxItem Content="Morning" />
                    <ComboBoxItem Content="Evening" />
                </ComboBox>

                <TextBlock Text="Booking Date:" />
                <DatePicker x:Name="BookingDatePicker" SelectedDateChanged="BookingDatePicker_SelectedDateChanged" Margin="0,0,0,10" />
                <TextBlock x:Name="BookingDateErrorTextBlock" Foreground="Red" Visibility="Collapsed" />

                <Button Content="Register" Click="btnRegister_Click" Width="100" />
            </StackPanel>
        </Border>
    </Grid>
</UserControl>

PatientRegistration.xaml.cs
-----------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using PatientManagementApp.Model;
using PatientManagementApp.ViewModel;

namespace PatientManagementApp.Views
{
    /// <summary>
    /// Interaction logic for PatientRegistration.xaml
    /// </summary>
    public partial class PatientRegistration : UserControl
    {
        public PatientRegistration()
        {
            InitializeComponent();
        }
        private void NameTextBox_TextChanged(object sender, System.Windows.Controls.TextChangedEventArgs e)
        {
            if (string.IsNullOrWhiteSpace(NameTextBox.Text) || !NameTextBox.Text.All(char.IsLetter))
            {
                NameErrorTextBlock.Text = "Enter name with alphabets only.";
                NameErrorTextBlock.Visibility = Visibility.Visible;
            }
            else
            {
                NameErrorTextBlock.Visibility = Visibility.Collapsed;
            }
        }

        private void AgeTextBox_TextChanged(object sender, System.Windows.Controls.TextChangedEventArgs e)
        {
            if (string.IsNullOrWhiteSpace(AgeTextBox.Text) || !int.TryParse(AgeTextBox.Text, out int age) || age < 0)
            {
                AgeErrorTextBlock.Text = "Enter a valid age (positive integer).";
                AgeErrorTextBlock.Visibility = Visibility.Visible;
            }
            else
            {
                AgeErrorTextBlock.Visibility = Visibility.Collapsed;
            }
        }

        private void DOBPicker_SelectedDateChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (DOBPicker.SelectedDate == null || DOBPicker.SelectedDate.Value >= DateTime.Now)
            {
                DOBErrorTextBlock.Text = "Date of Birth must be less than today.";
                DOBErrorTextBlock.Visibility = Visibility.Visible;
            }
            else
            {
                DOBErrorTextBlock.Visibility = Visibility.Collapsed;
            }
        }

        private void BookingDatePicker_SelectedDateChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (BookingDatePicker.SelectedDate == null || BookingDatePicker.SelectedDate.Value < DateTime.Now)
            {
                BookingDateErrorTextBlock.Text = "Booking Date must be today or later.";
                BookingDateErrorTextBlock.Visibility = Visibility.Visible;
            }
            else
            {
                BookingDateErrorTextBlock.Visibility = Visibility.Collapsed;
            }
        }

        private void btnRegister_Click(object sender, RoutedEventArgs e)
        {
            if (DataContext is IPatientViewModel viewModel)
            {
                var patient = new Patient
                {
                    Name = NameTextBox.Text,
                    Age = int.Parse(AgeTextBox.Text),
                    //DOB = DOBPicker.SelectedDate ?? DateTime.Now,
                    DOB = DOBPicker.SelectedDate.HasValue ? DOBPicker.SelectedDate.Value.ToString("yyyy-MM-dd") : DateTime.Now.ToString("yyyy-MM-dd"),
                    Address = AddressTextBox.Text,
                    Slot = SlotComboBox.Text,
                    //AppointmentDate = BookingDatePicker.SelectedDate ?? DateTime.Now,
                    BookingDate = BookingDatePicker.SelectedDate.HasValue ? BookingDatePicker.SelectedDate.Value.ToString("yyyy-MM-dd") : DateTime.Now.ToString("yyyy-MM-dd"),
                };
                viewModel.RegisterPatient(patient);


            }
        }
    }
}





MainWindow.xaml
---------------------------

<Window x:Class="PatientManagementApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PatientManagementApp"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <StackPanel x:Name="NavigationPanel" Orientation="Vertical" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10">
            <Button x:Name="btnShowRegistration" Content="Register Patient" Margin="10 20" Click="btnShowRegistration_Click"/>
            <Button x:Name="btnShowAppointmentConfirmation" Content="Appointment Confirmation" Margin="10 20" Click="btnShowAppointmentConfirmation_Click"/>
            <Button x:Name="btnShowDashboard" Content="Patient Dashboard" Margin="10 20" Click="btnShowDashboard_Click"/>
        </StackPanel>

        <ContentControl Name="ContentArea" Grid.Row="1" Margin="10"/>
    </Grid>
</Window>


MainWindow.xaml.cs
------------------------------

using System;
using System.Windows;
using System.Windows.Controls;
using PatientManagementApp.Model;
using PatientManagementApp.ViewModel;
using PatientManagementApp.Views;

namespace PatientManagementApp
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private readonly PatientViewModel _viewModel = new PatientViewModel();

        public MainWindow()
        {
            InitializeComponent();
            _viewModel.PatientRegistered += OnPatientRegistered;
            _viewModel.AppointmentConfirmed += OnAppointmentConfirmed;
        }

        private void btnShowRegistration_Click(object sender, RoutedEventArgs e)
        {
            var registration = new PatientRegistration { DataContext = _viewModel };
            ContentArea.Content = registration;
        }

        private void btnShowAppointmentConfirmation_Click(object sender, RoutedEventArgs e)
        {
            var appointmentConfirmation = new AppointmentConfirmation { DataContext = _viewModel };
            ContentArea.Content = appointmentConfirmation;
            NavigationPanel.Visibility = Visibility.Visible;
        }

        private void btnShowDashboard_Click(object sender, RoutedEventArgs e)
        {
            var dashboard = new PatientDashboard { DataContext = _viewModel };
            dashboard.BackToMainRequested += Dasboard_BackToMainRequested;
            ContentArea.Content = dashboard;
            NavigationPanel.Visibility = Visibility.Collapsed;
        }

        private void Dasboard_BackToMainRequested(object sender, EventArgs e)
        {
            UnsubscribeFromEvents();
            NavigateBackToMainScreen();
        }

        private void OnPatientRegistered(object sender, Patient patient)
        {
            MessageBox.Show($"Patient {patient.Name} registered successfully!");

            // Unsubscribe from the event to avoid multiple triggers
            _viewModel.PatientRegistered -= OnPatientRegistered;
            NavigateBackToMainScreen();
        }

        private void OnAppointmentConfirmed(object sender, Patient patient)
        {
            MessageBox.Show($"Appointment for {patient.Name} confirmed and added to the Patient Dashboard!");

            // Unsubscribe from the event to avoid multiple triggers
            _viewModel.AppointmentConfirmed -= OnAppointmentConfirmed;
            NavigateBackToMainScreen();
        }
        private void UnsubscribeFromEvents()
        {
            _viewModel.PatientRegistered -= OnPatientRegistered;
            _viewModel.AppointmentConfirmed -= OnAppointmentConfirmed;
        }
        private void NavigateBackToMainScreen()
        {
            ContentArea.Content = null;
            NavigationPanel.Visibility = Visibility.Visible;
        }
    }
}








******""""""""""""

interface

using System.Collections.ObjectModel;
using PatientManagementApp.Model;

namespace PatientManagementApp.Interface
{
    public interface IPatientViewModel
    {
        ObservableCollection<Patient> Patients { get; }
        ObservableCollection<Patient> ApprovedAppointments { get; }
        void RegisterPatient(Patient patient);
        void ApproveAppointment(Patient patient);
    }
}






model



using System;

namespace PatientManagementApp.Models
{
    public class Patient
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public string DOB { get; set; }
        public string Address { get; set; }
        public string Slot { get; set; }
        public string BookingDate { get; set; }
    }
}





mainwindow viewmodel
,,,,,

using System.Windows;
using PatientManagementApp.View;

namespace PatientManagementApp.ViewModel
{
    public class MainWindowViewModel
    {
        public void ShowRegistration(MainWindow window)
        {
            var registrationViewModel = new PatientRegistrationViewModel();
            var registration = new PatientRegistration { DataContext = registrationViewModel };
            window.ContentArea.Content = registration;
        }

        public void ShowAppointmentConfirmation(MainWindow window)
        {
            var appointmentConfirmationViewModel = new AppointmentConfirmationViewModel();
            var appointmentConfirmation = new AppointmentConfirmation { DataContext = appointment ConfirmationViewModel };
            window.ContentArea.Content = appointmentConfirmation;
        }

        public void ShowDashboard(MainWindow window)
        {
            var dashboardViewModel = new PatientDashboardViewModel();
            var dashboard = new PatientDashboard { DataContext = dashboardViewModel };
            dashboard.BackToMainRequested += (s, e) => NavigateBackToMainScreen(window);
            window.ContentArea.Content = dashboard;
        }

        private void NavigateBackToMainScreen(MainWindow window)
        {
            window.ContentArea.Content = null;
            window.NavigationPanel.Visibility = Visibility.Visible;
        }
    }
}





patient registration viewmodel

,,,,,,,,,,

using System.Collections.ObjectModel;
using PatientManagementApp.Model;
using System;

namespace PatientManagementApp.ViewModel
{
    public class PatientRegistrationViewModel : IPatientViewModel
    {
        public ObservableCollection<Patient> Patients { get; } = new ObservableCollection<Patient>();
        public ObservableCollection<Patient> ApprovedAppointments { get; } = new ObservableCollection<Patient>();

        public void RegisterPatient(Patient patient)
        {
            Patients.Add(patient);
            // Raise an event or perform additional logic if needed
        }

        public void ApproveAppointment(Patient patient)
        {
            ApprovedAppointments.Add(patient);
            // Raise an event or perform additional logic if needed
        }
    }
}






appointment confirmation viewmodel 
,,,,,,,,,



using System.Collections.ObjectModel;
using PatientManagementApp.Model;

namespace PatientManagementApp.ViewModel
{
    public class AppointmentConfirmationViewModel : IPatientViewModel
    {
        public ObservableCollection<Patient> Patients { get; } = new ObservableCollection<Patient>();
        public ObservableCollection<Patient> ApprovedAppointments { get; } = new ObservableCollection<Patient>();

        public void RegisterPatient(Patient patient)
        {
            Patients.Add(patient);
        }

        public void ApproveAppointment(Patient patient)
        {
            ApprovedAppointments.Add(patient);
            // Raise an event or perform additional logic if needed
        }
    }
}






patient dashboard viewmodel 
,,,,,,,,,,

using System.Collections.ObjectModel;
using PatientManagementApp.Model;

namespace PatientManagementApp.ViewModel
{
    public class PatientDashboardViewModel : IPatientViewModel
    {
        public ObservableCollection<Patient> Patients { get; } = new ObservableCollection<Patient>();
        public ObservableCollection<Patient> ApprovedAppointments { get; } = new ObservableCollection<Patient>();

        public void RegisterPatient(Patient patient)
        {
            Patients.Add(patient);
        }

        public void ApproveAppointment(Patient patient)
        {
            ApprovedAppointments.Add(patient);
        }
    }
}





patient registration.xaml

,,,
<UserControl x:Class="PatientManagementApp.UserControl.PatientRegistration"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Grid Width="383">
        <Border HorizontalAlignment="Center" VerticalAlignment="Center" BorderBrush="Gray" BorderThickness="2" Padding="20" Width="363">
            <StackPanel>
                <TextBlock Text="Patient Registration" FontSize="20" FontWeight="Bold" Margin="0,0,0,20" />

                <TextBlock Text="Name:" />
                <TextBox x:Name="NameTextBox" Margin="0,0,0,10" TextChanged="NameTextBox_TextChanged" />
                <TextBlock x:Name="NameErrorTextBlock" Foreground="Red" Visibility="Collapsed" />

                <TextBlock Text="Age:" />
                <TextBox x:Name="AgeTextBox" Margin="0,0,0,10" TextChanged="AgeTextBox_TextChanged" />
                <TextBlock x:Name="AgeErrorTextBlock" Foreground="Red" Visibility="Collapsed" />

                <TextBlock Text="Date of Birth:" />
                <DatePicker x:Name="DOBPicker" SelectedDateChanged="DOBPicker_SelectedDateChanged" Margin="0,0,0,10" />
                <TextBlock x:Name="DOBErrorTextBlock" Foreground="Red" Visibility="Collapsed" />

                <TextBlock Text="Address:" />
                <TextBox x:Name="AddressTextBox" Margin="0,0,0,10" />

                <TextBlock Text="Time Slot:" />
                <ComboBox x:Name="SlotComboBox" Margin="0,0,0,10">
                    <ComboBoxItem Content="Morning" />
                    <ComboBoxItem Content="Evening" />
                </ComboBox>

                <TextBlock Text="Booking Date:" />
                <DatePicker x:Name="BookingDatePicker" SelectedDateChanged="BookingDatePicker_SelectedDateChanged" Margin="0,0,0,10" />
                <TextBlock x:Name="BookingDateErrorTextBlock" Foreground="Red" Visibility="Collapsed" />

                <Button ```xml
                <Button Content="Register" Click="btnRegister_Click" Width="100" />
            </StackPanel>
        </Border>
    </Grid>
</User Control>






patient registration xaml.cs
,,,,,


using System.Windows;
using System.Windows.Controls;
using PatientManagementApp.Model;
using PatientManagementApp.ViewModel;

namespace PatientManagementApp.UserControl
{
    public partial class PatientRegistration : UserControl
    {
        public PatientRegistration()
        {
            InitializeComponent();
        }

        private void NameTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (string.IsNullOrWhiteSpace(NameTextBox.Text) || !NameTextBox.Text.All(char.IsLetter))
            {
                NameErrorTextBlock.Text = "Enter name with alphabets only.";
                NameErrorTextBlock.Visibility = Visibility.Visible;
            }
            else
            {
                NameErrorTextBlock.Visibility = Visibility.Collapsed;
            }
        }

        private void AgeTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (string.IsNullOrWhiteSpace(AgeTextBox.Text) || !int.TryParse(AgeTextBox.Text, out int age) || age < 0)
            {
                AgeErrorTextBlock.Text = "Enter a valid age (positive integer).";
                AgeErrorTextBlock.Visibility = Visibility.Visible;
            }
            else
            {
                AgeErrorTextBlock.Visibility = Visibility.Collapsed;
            }
        }

        private void DOBPicker_SelectedDateChanged(object sender, SelectionChangedEventArgs e)
        {
            if (DOBPicker.SelectedDate == null || DOBPicker.SelectedDate.Value >= DateTime.Now)
            {
                DOBErrorTextBlock.Text = "Date of Birth must be less than today.";
                DOBErrorTextBlock.Visibility = Visibility.Visible;
            }
            else
            {
                DOBErrorTextBlock.Visibility = Visibility.Collapsed;
            }
        }

        private void BookingDatePicker_SelectedDateChanged(object sender, SelectionChangedEventArgs e)
        {
            if (BookingDatePicker.SelectedDate == null || BookingDatePicker.SelectedDate.Value < DateTime.Now)
            {
                BookingDateErrorTextBlock.Text = "Booking Date must be today or later.";
                BookingDateErrorTextBlock.Visibility = Visibility.Visible;
            }
            else
            {
                BookingDateErrorTextBlock.Visibility = Visibility.Collapsed;
            }
        }

        private void btnRegister_Click(object sender, RoutedEventArgs e)
        {
            if (DataContext is PatientRegistrationViewModel viewModel)
            {
                var patient = new Patient
                {
                    Name = NameTextBox.Text,
                    Age = int.Parse(AgeTextBox.Text),
                    DOB = DOBPicker.SelectedDate.HasValue ? DOBPicker.SelectedDate.Value.ToString("yyyy-MM-dd") : DateTime.Now.ToString("yyyy-MM-dd"),
                    Address = AddressTextBox.Text,
                    Slot = SlotComboBox.Text,
                    BookingDate = BookingDatePicker.SelectedDate.HasValue ? BookingDatePicker.SelectedDate.Value.ToString("yyyy-MM-dd") : DateTime.Now.ToString("yyyy-MM-dd"),
                };
                viewModel.RegisterPatient(patient);
            }
        }
    }
}




appointment confirmation.xaml
,,,,,,,,,
<UserControl x:Class="PatientManagementApp.UserControl.AppointmentConfirmation"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <StackPanel Background="AliceBlue" Width="643" Height="444">
        <TextBlock Text="Appointments to Confirm" FontWeight="Bold" FontSize="16" Margin="10"/>

        <DataGrid Name="PatientsGrid" AutoGenerateColumns="True" 
                  SelectionMode="Single" Height="229" Margin="10"/>
        <Button x:Name="btnApproveAppointment" Content="Give Appointment" Click="btnApproveAppointment_Click" Width="138" />
    </StackPanel>
</User Control>





appointment confirmation.xaml.cs
,,,,,,
using System.Windows;
using System.Windows.Controls;
using PatientManagementApp.Model;
using PatientManagementApp.ViewModel;

namespace PatientManagementApp.UserControl
{
    public partial class AppointmentConfirmation : UserControl
    {
        public AppointmentConfirmation()
        {
            InitializeComponent();
        }

        private void btnApproveAppointment_Click(object sender, RoutedEventArgs e)
        {
            if (DataContext is AppointmentConfirmationViewModel viewModel && PatientsGrid.SelectedItem is Patient selectedPatient)
            {
                viewModel.ApproveAppointment(selectedPatient);
                MessageBox.Show($"Appointment for {selectedPatient.Name} approved!");
            }
            else
            {
                MessageBox.Show("Please Select patient details");
            }
        }
    }
}




patient dashboard.xaml
,,,,,,

<UserControl x ```xml
<UserControl x:Class="PatientManagementApp.UserControl.PatientDashboard"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <StackPanel>
        <TextBlock Text="Approved Appointments" FontWeight="Bold" FontSize="16" Margin="10"/>

        <DataGrid ItemsSource="{Binding ApprovedAppointments}" AutoGenerateColumns="True" Height="200" Margin="10"/>

        <Button x:Name="btnBackToMain" Content="Exit" Click="btnBackToMain_Click" Width="57" HorizontalAlignment="Right"/>
    </StackPanel>
</User Control>








patient dashboard.xaml.cs
,,,,,,,,,,

using System.Windows;
using System.Windows.Controls;

namespace PatientManagementApp.UserControl
{
    public partial class PatientDashboard : UserControl
    {
        public event EventHandler BackToMainRequested;

        public PatientDashboard()
        {
            InitializeComponent();
        }

        private void btnBackToMain_Click(object sender, RoutedEventArgs e)
        {
            BackToMainRequested?.Invoke(this, EventArgs.Empty);
        }
    }
}









_____
mainwindow.xaml
,,,,,,


<Window x:Class="PatientManagementApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <StackPanel x:Name="NavigationPanel" Orientation="Vertical" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10">
            <Button x:Name="btnShowRegistration" Content="Register Patient" Margin="10 20" Click="btnShowRegistration_Click"/>
            <Button x:Name="btnShowAppointmentConfirmation" Content="Appointment Confirmation" Margin="10 20" Click="btnShowAppointmentConfirmation_Click"/>
            <Button x:Name="btnShowDashboard" Content="Patient Dashboard" Margin="10 20" Click="btnShowDashboard_Click"/>
        </StackPanel>

        <ContentControl Name="ContentArea" Grid.Row="1" Margin="10"/>
    </Grid>
</Window>




mainwindow.xaml.cs
,,,,,

using System.Windows;
using PatientManagementApp.ViewModel;

namespace PatientManagementApp.View
{
    public partial class MainWindow : Window
    {
        private readonly MainWindowViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainWindowViewModel();
        }

        private void btnShowRegistration_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.ShowRegistration(this);
        }

        private void btnShowAppointmentConfirmation_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.ShowAppointmentConfirmation(this);
        }

        private void btnShowDashboard_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.ShowDashboard(this);
        }
    }
}














----------------------------------------------------


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using PatientManagementApp.UserControls;
using PatientManagementApp.ViewModels;
using PatientManagementApp;
using PatientManagementApp.Models;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace PatientManagementApp.ViewModels
{
    public class MainWindowViewModel
    {
        private readonly MainWindowViewModel _viewModel;

        public void ShowRegistration(MainWindow window)
        {
            var registrationViewModel = new PatientRegistrationViewModel();
            var registration = new PatientRegistration { DataContext = registrationViewModel };

            window.ContentArea.Content = registration;
        }

        public void ShowAppointmentConfirmation(MainWindow window)
        {
            var appointmentConfirmationViewModel = new AppointmentConfirmationViewModel();
            var appointmentConfirmation = new AppointmentConfirmation { DataContext = appointmentConfirmationViewModel };

            window.ContentArea.Content = appointmentConfirmation;
        }

        public void ShowDashboard(MainWindow window)
        {
            var dashboardViewModel = new PatientDashboardViewModel();
            var dashboard = new PatientDashboard { DataContext = dashboardViewModel };
            dashboard.BackToMainRequested += (s, e) => NavigateBackToMainScreen(window);
            window.ContentArea.Content = dashboard;
        }

        private void NavigateBackToMainScreen(MainWindow window)
        {
            window.ContentArea.Content = null;
            window.NavigationPanel.Visibility = Visibility.Visible;
        }

        //private void OnPatientRegistered(object sender, PatientManagementApp1.Models.Patient patient)
        //{
        //    _viewModel.PatientRegistered += OnPatientRegistered;
        //    MessageBox.Show($"Patient {patient.Name} registered successfully!");

        //   // NavigateBackToMainScreen();
        //}


    }
}









Severity	Code	Description	Project	File	Line	Suppression State
Error (active)	CS0426	The type name 'VisualStyles' does not exist in the type 'Forms'	PatientManagementApp	C:\Users\2021470\source\repos\PatientManagementApp\PatientManagementApp\ViewModels\MainWindowViewModel.cs	12	
Severity	Code	Description	Project	File	Line	Suppression State
Error (active)	CS1061	'object' does not contain a definition for 'Content' and no accessible extension method 'Content' accepting a first argument of type 'object' could be found (are you missing a using directive or an assembly reference?)	PatientManagementApp	C:\Users\2021470\source\repos\PatientManagementApp\PatientManagementApp\ViewModels\MainWindowViewModel.cs	25	
Severity	Code	Description	Project	File	Line	Suppression State
Error (active)	CS1061	'object' does not contain a definition for 'Content' and no accessible extension method 'Content' accepting a first argument of type 'object' could be found (are you missing a using directive or an assembly reference?)	PatientManagementApp	C:\Users\2021470\source\repos\PatientManagementApp\PatientManagementApp\ViewModels\MainWindowViewModel.cs	25	
Severity	Code	Description	Project	File	Line	Suppression State
Error (active)	CS1061	'object' does not contain a definition for 'Content' and no accessible extension method 'Content' accepting a first argument of type 'object' could be found (are you missing a using directive or an assembly reference?)	PatientManagementApp	C:\Users\2021470\source\repos\PatientManagementApp\PatientManagementApp\ViewModels\MainWindowViewModel.cs	46	
Severity	Code	Description	Project	File	Line	Suppression State
Error (active)	CS1061	'object' does not contain a definition for 'Content' and no accessible extension method 'Content' accepting a first argument of type 'object' could be found (are you missing a using directive or an assembly reference?)	PatientManagementApp	C:\Users\2021470\source\repos\PatientManagementApp\PatientManagementApp\ViewModels\MainWindowViewModel.cs	41	










using System;
using System.Windows;
using PatientManagementApp.UserControls;
using PatientManagementApp.Models;

namespace PatientManagementApp.ViewModels
{
    public class MainWindowViewModel
    {
        public void ShowRegistration(MainWindow window)
        {
            var registrationViewModel = new PatientRegistrationViewModel();
            var registration = new PatientRegistration { DataContext = registrationViewModel };

            if (window.ContentArea is FrameworkElement contentControl)
            {
                contentControl.Content = registration;
            }
        }

        public void ShowAppointmentConfirmation(MainWindow window)
        {
            var appointmentConfirmationViewModel = new AppointmentConfirmationViewModel();
            var appointmentConfirmation = new AppointmentConfirmation { DataContext = appointmentConfirmationViewModel };

            if (window.ContentArea is FrameworkElement contentControl)
            {
                contentControl.Content = appointmentConfirmation;
            }
        }

        public void ShowDashboard(MainWindow window)
        {
            var dashboardViewModel = new PatientDashboardViewModel();
            var dashboard = new PatientDashboard { DataContext = dashboardViewModel };
            dashboard.BackToMainRequested += (s, e) => NavigateBackToMainScreen(window);

            if (window.ContentArea is FrameworkElement contentControl)
            {
                contentControl.Content = dashboard;
            }
        }

        private void NavigateBackToMainScreen(MainWindow window)
        {
            if (window.ContentArea is FrameworkElement contentControl)
            {
                contentControl.Content = null;
            }
            window.NavigationPanel.Visibility = Visibility.Visible;
        }
    }
}












.............

mainwindow.xaml.cs


using System.Windows;
using PatientManagementApp.Model;
using PatientManagementApp.ViewModels;

namespace PatientManagementApp
{
    public partial class MainWindow : Window
    {
        private MainWindowViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainWindowViewModel();
        }

        private void btnRegisterPatient_Click(object sender, RoutedEventArgs e)
        {
            // Show the registration form and handle registration
            _viewModel.ShowRegistration(this);
            _viewModel.PatientRegistered += OnPatientRegistered;
        }

        private void OnPatientRegistered(object sender, Patient patient)
        {
            MessageBox.Show($"Patient {patient.Name} registered successfully!");
            _viewModel.PatientRegistered -= OnPatientRegistered; // Unsubscribe after use
        }

        private void btnShowDashboard_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.ShowDashboard(this);
        }

        private void btnShowAppointmentConfirmation_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.ShowAppointmentConfirmation(this);
            _viewModel.AppointmentConfirmed += OnAppointmentConfirmed;
        }

        private void OnAppointmentConfirmed(object sender, Patient patient)
        {
            MessageBox.Show($"Appointment for {patient.Name} has been confirmed and added to the dashboard.");
            _viewModel.AppointmentConfirmed -= OnAppointmentConfirmed; // Unsubscribe after use
        }
    }
}





mainwindow viewmodel



using System;
using System.Collections.ObjectModel;
using PatientManagementApp.Model;
using PatientManagementApp.UserControls;

namespace PatientManagementApp.ViewModels
{
    public class MainWindowViewModel
    {
        public ObservableCollection<Patient> Patients { get; private set; }
        public event EventHandler<Patient> PatientRegistered;
        public event EventHandler<Patient> AppointmentConfirmed;

        public MainWindowViewModel()
        {
            Patients = new ObservableCollection<Patient>();
        }

        public void ShowRegistration(MainWindow window)
        {
            var registrationViewModel = new PatientRegistrationViewModel();
            var registration = new PatientRegistration { DataContext = registrationViewModel };

            registrationViewModel.PatientRegistered += (s, patient) =>
            {
                Patients.Add(patient);
                PatientRegistered?.Invoke(this, patient);
            };

            window.ContentArea.Content = registration;
        }

        public void ShowAppointmentConfirmation(MainWindow window)
        {
            var appointmentViewModel = new AppointmentConfirmationViewModel(Patients);
            var appointmentConfirmation = new AppointmentConfirmation { DataContext = appointmentViewModel };

            appointmentViewModel.AppointmentConfirmed += (s, patient) =>
            {
                AppointmentConfirmed?.Invoke(this, patient);
            };

            window.ContentArea.Content = appointmentConfirmation;
        }

        public void ShowDashboard(MainWindow window)
        {
            var dashboardViewModel = new PatientDashboardViewModel(Patients);
            var dashboard = new PatientDashboard { DataContext = dashboardViewModel };

            window.ContentArea.Content = dashboard;
        }
    }
}




patientregistrationviewmodel



using System;
using PatientManagementApp.Model;

namespace PatientManagementApp.ViewModels
{
    public class PatientRegistrationViewModel
    {
        public event EventHandler<Patient> PatientRegistered;

        public void RegisterPatient(string name, int age, string dob, string address, string slot, DateTime bookingDate, string appointmentDate)
        {
            var newPatient = new Patient
            {
                Name = name,
                Age = age,
                DOB = dob,
                Address = address,
                Slot = slot,
                BookingDate = bookingDate,
                AppointmentDate = appointmentDate
            };

            PatientRegistered?.Invoke(this, newPatient);
        }
    }
}





appointment confirmation viewmodel 



using System;
using System.Collections.ObjectModel;
using PatientManagementApp.Model;

namespace PatientManagementApp.ViewModels
{
    public class AppointmentConfirmationViewModel
    {
        public ObservableCollection<Patient> Patients { get; }
        public event EventHandler<Patient> AppointmentConfirmed;

        public AppointmentConfirmationViewModel(ObservableCollection<Patient> patients)
        {
            Patients = patients;
        }

        public void ConfirmAppointment(Patient patient)
        {
            if (patient != null)
            {
                AppointmentConfirmed?.Invoke(this, patient);
            }
        }
    }
}






patient dashboard viewmodel



using System.Collections.ObjectModel;
using PatientManagementApp.Model;

namespace PatientManagementApp.ViewModels
{
    public class PatientDashboardViewModel
    {
        public ObservableCollection<Patient> PatientsWithAppointments { get; }

        public PatientDashboardViewModel(ObservableCollection<Patient> patients)
        {
            // Only include patients who have confirmed appointments
            PatientsWithAppointments = new ObservableCollection<Patient>(patients);
        }
    }
}




mainwindow.xaml.cs



using System.Windows;
using PatientManagementApp.ViewModels;

namespace PatientManagementApp
{
    public partial class MainWindow : Window
    {
        private MainWindowViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainWindowViewModel();
        }

        private void btnRegisterPatient_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.ShowRegistration(this);
            _viewModel.PatientRegistered += OnPatientRegistered;
        }

        private void OnPatientRegistered(object sender, PatientManagementApp.Model.Patient patient)
        {
            MessageBox.Show($"Patient {patient.Name} registered successfully!");
            _viewModel.PatientRegistered -= OnPatientRegistered; // Unsubscribe after the event fires
        }

        private void btnShowAppointmentConfirmation_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.ShowAppointmentConfirmation(this);
            _viewModel.AppointmentConfirmed += OnAppointmentConfirmed;
        }

        private void OnAppointmentConfirmed(object sender, PatientManagementApp.Model.Patient patient)
        {
            MessageBox.Show($"Appointment for {patient.Name} has been confirmed and added to the dashboard.");
            _viewModel.AppointmentConfirmed -= OnAppointmentConfirmed; // Unsubscribe after the event fires
        }

        private void btnShowDashboard_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.ShowDashboard(this);
        }
    }
}





patient registration xaml.cs





using System;
using System.Windows;
using System.Windows.Controls;
using PatientManagementApp.ViewModels;

namespace PatientManagementApp.UserControls
{
    public partial class PatientRegistration : UserControl
    {
        private PatientRegistrationViewModel _viewModel;

        public PatientRegistration()
        {
            InitializeComponent();
            _viewModel = DataContext as PatientRegistrationViewModel;
        }

        private void btnSubmit_Click(object sender, RoutedEventArgs e)
        {
            if (_viewModel != null)
            {
                // Collect data from input fields (for illustration purposes)
                string name = txtName.Text;
                int age = int.Parse(txtAge.Text);
                string dob = txtDOB.Text;
                string address = txtAddress.Text;
                string slot = cmbSlot.Text;
                DateTime bookingDate = DateTime.Now;
                string appointmentDate = txtAppointmentDate.Text;

                _viewModel.RegisterPatient(name, age, dob, address, slot, bookingDate, appointmentDate);
            }
        }
    }
}
    }
}






appointment confirmation xaml.cs





using System.Windows;
using System.Windows.Controls;
using PatientManagementApp.Model;
using PatientManagementApp.ViewModels;

namespace PatientManagementApp.UserControls
{
    public partial class AppointmentConfirmation : UserControl
    {
        private AppointmentConfirmationViewModel _viewModel;

        public AppointmentConfirmation()
        {
            InitializeComponent();
            _viewModel = DataContext as AppointmentConfirmationViewModel;
        }

        private void btnConfirmAppointment_Click(object sender, RoutedEventArgs e)
        {
            if (_viewModel != null && dataGridPatients.SelectedItem is Patient selectedPatient)
            {
                _viewModel.ConfirmAppointment(selectedPatient);
            }
        }
    }
}




patient dashboard xaml.cs




using System.Windows.Controls;
using PatientManagementApp.ViewModels;

namespace PatientManagementApp.UserControls
{
    public partial class PatientDashboard : UserControl
    {
        private PatientDashboardViewModel _viewModel;

        public PatientDashboard()
        {
            InitializeComponent();
            _viewModel = DataContext as PatientDashboardViewModel;
        }
    }






















