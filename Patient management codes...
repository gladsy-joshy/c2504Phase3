Here's the full code focusing on event handling without using ICommand or bindings, as per your request:

1. MainWindow (MainWindow.xaml)

<Window x:Class="YourNamespace.View.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Patient Admission" Height="450" Width="800">
    <StackPanel>
        <Button Content="Patient Registration" Click="OnPatientRegistrationClick" />
        <Button Content="Appointment Confirmation" Click="OnAppointmentConfirmationClick" />
        <Button Content="Patient Dashboard" Click="OnPatientDashboardClick" />
    </StackPanel>
</Window>

2. Code-Behind (MainWindow.xaml.cs)

using System;
using System.Windows;
using YourNamespace.UserControl;
using YourNamespace.ViewModel;

namespace YourNamespace.View
{
    public partial class MainWindow : Window
    {
        private readonly MainWindowViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainWindowViewModel();
            _viewModel.NavigationRequested += OnNavigationRequested;
        }

        private void OnPatientRegistrationClick(object sender, RoutedEventArgs e)
        {
            _viewModel.NavigateTo("PatientRegistration");
        }

        private void OnAppointmentConfirmationClick(object sender, RoutedEventArgs e)
        {
            _viewModel.NavigateTo("AppointmentConfirmation");
        }

        private void OnPatientDashboardClick(object sender, RoutedEventArgs e)
        {
            _viewModel.NavigateTo("PatientDashboard");
        }

        private void OnNavigationRequested(object sender, string viewName)
        {
            switch (viewName)
            {
                case "PatientRegistration":
                    var registrationWindow = new PatientRegistrationUserControl();
                    registrationWindow.Show();
                    break;
                case "AppointmentConfirmation":
                    var confirmationWindow = new AppointmentConfirmationUserControl();
                    confirmationWindow.Show();
                    break;
                case "PatientDashboard":
                    var dashboardWindow = new PatientDashboardUserControl();
                    dashboardWindow.Show();
                    break;
            }
        }
    }
}

3. MainWindow ViewModel (MainWindowViewModel.cs)

using System;

namespace YourNamespace.ViewModel
{
    public class MainWindowViewModel
    {
        public event EventHandler<string> NavigationRequested;

        public void NavigateTo(string viewName)
        {
            NavigationRequested?.Invoke(this, viewName);
        }
    }
}

4. User Control - Patient Registration (PatientRegistrationUserControl.xaml)

<UserControl x:Class="YourNamespace.UserControl.PatientRegistrationUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Grid>
        <StackPanel>
            <TextBox Name="NameField" PlaceholderText="Name" />
            <TextBox Name="AgeField" PlaceholderText="Age" />
            <DatePicker Name="DOBField" PlaceholderText="DOB" />
            <TextBox Name="AddressField" PlaceholderText="Address" />
            <ComboBox Name="SlotField" PlaceholderText="Slot">
                <ComboBoxItem Content="Morning" />
                <ComboBoxItem Content="Evening" />
            </ComboBox>
            <DatePicker Name="BookingDateField" PlaceholderText="Booking Date" />
            <Button Content="Register" Click="OnRegisterClick" />
        </StackPanel>
    </Grid>
</UserControl>

5. Code-Behind - Patient Registration (PatientRegistrationUserControl.xaml.cs)

using System.Windows;
using System.Windows.Controls;
using YourNamespace.ViewModel;

namespace YourNamespace.UserControl
{
    public partial class PatientRegistrationUserControl : UserControl
    {
        private readonly PatientRegistrationViewModel _viewModel;

        public PatientRegistrationUserControl()
        {
            InitializeComponent();
            _viewModel = new PatientRegistrationViewModel();
            _viewModel.PatientRegistered += OnPatientRegistered;
        }

        private void OnRegisterClick(object sender, RoutedEventArgs e)
        {
            var patient = new PatientModel
            {
                Name = NameField.Text,
                Age = int.Parse(AgeField.Text),
                DateOfBirth = DOBField.SelectedDate.GetValueOrDefault(),
                Address = AddressField.Text,
                Slot = (SlotField.SelectedItem as ComboBoxItem)?.Content.ToString(),
                BookingDate = BookingDateField.SelectedDate.GetValueOrDefault()
            };
            _viewModel.RegisterPatient(patient);
        }

        private void OnPatientRegistered(object sender, string message)
        {
            MessageBox.Show(message, "Notification");
        }
    }
}

6. ViewModel - Patient Registration (PatientRegistrationViewModel.cs)

using System;
using System.Collections.ObjectModel;
using YourNamespace.Model;

namespace YourNamespace.ViewModel
{
    public class PatientRegistrationViewModel
    {
        public ObservableCollection<PatientModel> Patients { get; set; }
        public event EventHandler<string> PatientRegistered;

        public PatientRegistrationViewModel()
        {
            Patients = new ObservableCollection<PatientModel>();
        }

        public void RegisterPatient(PatientModel patient)
        {
            Patients.Add(patient);
            PatientRegistered?.Invoke(this, "Patient registered successfully!");
        }
    }
}

7. User Control - Appointment Confirmation (AppointmentConfirmationUserControl.xaml)

<UserControl x:Class="YourNamespace.UserControl.AppointmentConfirmationUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Grid>
        <DataGrid Name="PatientDataGrid" AutoGenerateColumns="True" />
        <Button Content="Confirm Appointment" Click="OnConfirmAppointmentClick" />
    </Grid>
</UserControl>

8. Code-Behind - Appointment Confirmation (AppointmentConfirmationUserControl.xaml.cs)

using System.Windows;
using System.Windows.Controls;
using YourNamespace.Model;
using YourNamespace.ViewModel;

namespace YourNamespace.UserControl
{
    public partial class AppointmentConfirmationUserControl : UserControl
    {
        private readonly AppointmentConfirmationViewModel _viewModel;

        public AppointmentConfirmationUserControl()
        {
            InitializeComponent();
            _viewModel = new AppointmentConfirmationViewModel();
            _viewModel.AppointmentConfirmed += OnAppointmentConfirmed;
            PatientDataGrid.ItemsSource = _viewModel.Patients;
        }

        private void OnConfirmAppointmentClick(object sender, RoutedEventArgs e)
        {
            if (PatientDataGrid.SelectedItem is PatientModel selectedPatient)
            {
                _viewModel.ConfirmAppointment(selectedPatient);
            }
        }

        private void OnAppointmentConfirmed(object sender, string message)
        {
            MessageBox.Show(message, "Notification");
        }
    }
}

9. ViewModel - Appointment Confirmation (AppointmentConfirmationViewModel.cs)

using System;
using System.Collections.ObjectModel;
using YourNamespace.Model;

namespace YourNamespace.ViewModel
{
    public class AppointmentConfirmationViewModel
    {
        public ObservableCollection<PatientModel> Patients { get; set; }
        public event EventHandler<string> AppointmentConfirmed;

        public AppointmentConfirmationViewModel()
        {
            Patients = new ObservableCollection<PatientModel>(); // Fill with data from a shared collection or service
        }

        public void ConfirmAppointment(PatientModel patient)
        {
            patient.IsAppointmentConfirmed = true;
            AppointmentConfirmed?.Invoke(this, "Appointment confirmed!");
        }
    }
}

10. User Control - Patient Dashboard (PatientDashboardUserControl.xaml)

<UserControl x:Class="YourNamespace.UserControl.PatientDashboardUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Grid>
        <DataGrid Name="ConfirmedAppointmentsDataGrid" AutoGenerateColumns="True" />
        <Button Content="Exit" Click="OnExitClick" />
    </Grid>
</UserControl>

11. Code-Behind - Patient Dashboard (PatientDashboardUserControl.xaml.cs)

using System.Windows;
using System.Windows.Controls;
using YourNamespace.ViewModel;

namespace YourNamespace.UserControl
{
    public partial class PatientDashboardUserControl : UserControl
    {
        private readonly PatientDashboardViewModel _viewModel;

        public PatientDashboardUserControl()
        {
            InitializeComponent();
            _viewModel = new PatientDashboardViewModel();
            ConfirmedAppointmentsDataGrid.ItemsSource = _viewModel.ConfirmedAppointments;
        }

        private void OnExitClick(object sender, RoutedEventArgs e)
        {
            Window.GetWindow(this)?.Close();
        }
    }
}

12. ViewModel - Patient Dashboard (PatientDashboardViewModel.cs)

using System.Collections.ObjectModel;
using YourNamespace.Model;

namespace YourNamespace.ViewModel
{
    public class PatientDashboardViewModel
    {
        public ObservableCollection<PatientModel> ConfirmedAppointments { get; set; }

        public PatientDashboardViewModel()
        {
            ConfirmedAppointments = new ObservableCollection<PatientModel>(); // Fill with confirmed appointments
        }
    }
}

This code organizes the WPF application into event-based handling with minimal code in the XAML and code-behind files. Each ViewModel raises events that are handled in the respective user control code-behind files.





_______________________________________________________________________________________________________________________________________________________________________________________####################################




IPatientviewmodel
-------------------


using System.Collections.ObjectModel;
using PatientManagementApp.Models;

namespace PatientManagementApp.Interfaces
{
    public interface IPatientViewModel
    {
        ObservableCollection<Patient> Patients { get; }
        void RegisterPatient(Patient patient);
    }
}




Patient.cs
------------


using System;

namespace PatientManagementApp.Models
{
    public class Patient
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public DateTime DateOfBirth { get; set; }
        public string Address { get; set; }
        public string Slot { get; set; }
        public DateTime BookingDate { get; set; }
    }
}



Appointment confirmation.xaml
-----------------------------------


<UserControl x:Class="PatientManagementApp.UserControls.AppointmentConfirmation"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PatientManagementApp.UserControls"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <StackPanel Background="AliceBlue" Width="643" Height="444">
        <TextBlock Text="Appointments to Confirm" FontWeight="Bold" FontSize="16" Margin="10"/>

        <DataGrid Name="PatientsGrid" ItemsSource="{Binding Patients}" AutoGenerateColumns="True" 
                  SelectionMode="Single" Height="229" Margin="10"/>
        <Button x:Name="ConfirmAppointment" Content="Give Appointment" Width="138" Click="OnConfirmAppointmentClick" />
    </StackPanel>
</UserControl>





Appointment confirmation.xaml.cs
----------------------------------------



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using PatientManagementApp.Interfaces;
using PatientManagementApp.Models;
using PatientManagementApp.ViewModels;

namespace PatientManagementApp.UserControls
{
    /// <summary>
    /// Interaction logic for AppointmentConfirmation.xaml
    /// </summary>
    public partial class AppointmentConfirmation : UserControl
    {
        private readonly AppointmentConfirmationViewModel _viewModel;

        public AppointmentConfirmation()
        {
            InitializeComponent();
            _viewModel = new AppointmentConfirmationViewModel();
            _viewModel.AppointmentConfirmed += OnAppointmentConfirmed;
            PatientsGrid.ItemsSource = _viewModel.Patients;
        }

        private void OnConfirmAppointmentClick(object sender, RoutedEventArgs e)
        {
            //if (PatientsGrid.SelectedItem is Patient selectedPatient)
            //{
            //    _viewModel.ConfirmAppointment(selectedPatient);
            //}
            if (DataContext is AppointmentConfirmationViewModel viewModel && PatientsGrid.SelectedItem is Patient selectedPatient)
            {
                viewModel.ConfirmAppointment(selectedPatient);
                MessageBox.Show($"Appointment for {selectedPatient.Name} approved!");
            }
            else
            {
                MessageBox.Show("Please Select patient details");
            }
        }

        private void OnAppointmentConfirmed(object sender, string message)
        {
            MessageBox.Show(message, "Notification");
        }
    }

}





patientdashboard.xaml
-----------------------

<UserControl x:Class="PatientManagementApp.UserControls.PatientDashboard"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PatientManagementApp.UserControls"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid>
        <DataGrid Name="ConfirmedAppointmentsDataGrid" AutoGenerateColumns="True" />
        <Button Content="Exit" Click="OnExitClick" />
    </Grid>
</UserControl>




patientdashboard.xaml.cs
----------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using PatientManagementApp.ViewModels;

namespace PatientManagementApp.UserControls
{
    /// <summary>
    /// Interaction logic for PatientDashboard.xaml
    /// </summary>
    public partial class PatientDashboard : UserControl
    {
        private readonly PatientDashboardViewModel _viewModel;

        public PatientDashboard()
        {
            InitializeComponent();
            _viewModel = new PatientDashboardViewModel();
            ConfirmedAppointmentsDataGrid.ItemsSource = _viewModel.ConfirmedAppointments;
        }

        private void OnExitClick(object sender, RoutedEventArgs e)
        {
            Window.GetWindow(this)?.Close();
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {

        }
    }
}



patient registration.xaml
-------------------------------



 <UserControl x:Class="PatientManagementApp.UserControls.PatientRegistration"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PatientManagementApp.UserControls"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"><Grid Width="383">
    <Border HorizontalAlignment="Center" VerticalAlignment="Center" BorderBrush="Gray" BorderThickness="2" Padding="20" Width="363">
        <StackPanel>
            <TextBlock Text="Patient Registration" FontSize="20" FontWeight="Bold" Margin="0,0,0,20" />

            <TextBlock Text="Name:" />
                <TextBox x:Name="NameField" Margin="0,0,0,10"  />
            <TextBlock x:Name="NameErrorTextBlock" Foreground="Red" Visibility="Collapsed" />

            <TextBlock Text="Age:" />
                <TextBox x:Name="AgeField" Margin="0,0,0,10"  />
            <TextBlock x:Name="AgeErrorTextBlock" Foreground="Red" Visibility="Collapsed" />

            <TextBlock Text="Date of Birth:" />
                <DatePicker x:Name="DOBField"  Margin="0,0,0,10" />
                <TextBlock x:Name="DOBErrorTextBlock" Foreground="Red" Visibility="Collapsed" />

            <TextBlock Text="Address:" />
                <TextBox x:Name="AddressField" Margin="0,0,0,10" />

            <TextBlock Text="Time Slot:" />
                <ComboBox x:Name="SlotField" Margin="0,0,0,10">
                <ComboBoxItem Content="Morning" />
                <ComboBoxItem Content="Evening" />
            </ComboBox>

            <TextBlock Text="Booking Date:" />
            <DatePicker x:Name="BookingDateField"  Margin="0,0,0,10" />
            <TextBlock x:Name="BookingDateErrorTextBlock" Foreground="Red" Visibility="Collapsed" />

            <Button Content="Register" Width="100" Click="OnRegisterClick"/>
        </StackPanel>
    </Border>
</Grid>
</UserControl>







patient registration.xaml.cs
----------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using PatientManagementApp.Models;
using PatientManagementApp.ViewModels;

namespace PatientManagementApp.UserControls
{
    /// <summary>
    /// Interaction logic for PatientRegistration.xaml
    /// </summary>
    public partial class PatientRegistration : UserControl
    {
        private readonly PatientRegistrationViewModel _viewModel;

        public PatientRegistration()
        {
            InitializeComponent();
            _viewModel = new PatientRegistrationViewModel();
            _viewModel.PatientRegistered += OnPatientRegistered;
        }

        private void OnRegisterClick(object sender, RoutedEventArgs e)
        {
            var patient = new Patient
            {
                Name = NameField.Text,
                Age = int.Parse(AgeField.Text),
                DateOfBirth = DOBField.SelectedDate.GetValueOrDefault(),
                Address = AddressField.Text,
                Slot = (SlotField.SelectedItem as ComboBoxItem)?.Content.ToString(),
                BookingDate = BookingDateField.SelectedDate.GetValueOrDefault()
            };
            _viewModel.RegisterPatient(patient);
        }

        private void OnPatientRegistered(object sender, string message)
        {
            MessageBox.Show(message, "Notification");
        }
    }

}




appointmnet confirmation viewmodel
-----------------------------------------



using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PatientManagementApp.Interfaces;
using PatientManagementApp.Models;

namespace PatientManagementApp.ViewModels
{
    public class AppointmentConfirmationViewModel
    {
        public ObservableCollection<Patient> Patients { get; set; }
        public event EventHandler<string> AppointmentConfirmed;

        public AppointmentConfirmationViewModel()
        {
            Patients = new ObservableCollection<Patient>(); // Fill with data from a shared collection or service
        }

        public void ConfirmAppointment(Patient patient)
        {
            //patient.IsAppointmentConfirmed = true;
            AppointmentConfirmed?.Invoke(this, "Appointment confirmed!");
        }
    }

}



mainwindow viewmodel
----------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PatientManagementApp.Interfaces;
using PatientManagementApp.Models;

namespace PatientManagementApp.ViewModels
{
    public class AppointmentConfirmationViewModel
    {
        public ObservableCollection<Patient> Patients { get; set; }
        public event EventHandler<string> AppointmentConfirmed;

        public AppointmentConfirmationViewModel()
        {
            Patients = new ObservableCollection<Patient>(); // Fill with data from a shared collection or service
        }

        public void ConfirmAppointment(Patient patient)
        {
            //patient.IsAppointmentConfirmed = true;
            AppointmentConfirmed?.Invoke(this, "Appointment confirmed!");
        }
    }

}




patient dashboard viewmodel
------------------------------


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PatientManagementApp.Interfaces;
using PatientManagementApp.Models;


namespace PatientManagementApp.ViewModels
{
    public class PatientDashboardViewModel
    {
        public ObservableCollection<Patient> ConfirmedAppointments { get; set; }

        public PatientDashboardViewModel()
        {
            ConfirmedAppointments = new ObservableCollection<Patient>(); // Fill with confirmed appointments
        }
    }

}





patient registration viewmodel
-------------------------------------


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using PatientManagementApp.Interfaces;
using PatientManagementApp.Models;


namespace PatientManagementApp.ViewModels
{
    public class PatientRegistrationViewModel
    {
        public ObservableCollection<Patient> Patients { get; set; }
        public event EventHandler<string> PatientRegistered;

        public PatientRegistrationViewModel()
        {
            Patients = new ObservableCollection<Patient>();
        }

        public void RegisterPatient(Patient patient)
        {
            Patients.Add(patient);
            PatientRegistered?.Invoke(this, "Patient registered successfully!");
        }
    }

}




mainwindow.xaml
-----------------------


<Window x:Class="PatientManagementApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Patient Management App" Height="450" Width="800">
    <Grid>
        <StackPanel HorizontalAlignment="Left">
        <Button Content="Patient Registration" Click="OnPatientRegistrationClick" Margin="10"/>
        <Button Content="Appointment Confirmation" Click="OnAppointmentConfirmationClick" Margin="10" />
        <Button Content="Patient Dashboard" Click="OnPatientDashboardClick" Margin="10"/>
        </StackPanel>
        <ContentControl x:Name="MainContent" Grid.Row="1"/>

    </Grid>

</Window>




mainwindow.xaml.cs
------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using PatientManagementApp.UserControls;
using PatientManagementApp.ViewModels;

namespace PatientManagementApp
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private readonly MainWindowViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainWindowViewModel();
            _viewModel.NavigationRequested += OnNavigationRequested;
        }

        private void OnPatientRegistrationClick(object sender, RoutedEventArgs e)
        {
            _viewModel.NavigateTo("PatientRegistration");
        }

        private void OnAppointmentConfirmationClick(object sender, RoutedEventArgs e)
        {
            _viewModel.NavigateTo("AppointmentConfirmation");
        }

        private void OnPatientDashboardClick(object sender, RoutedEventArgs e)
        {
            _viewModel.NavigateTo("PatientDashboard");
        }

        private void OnNavigationRequested(object sender, string viewName)
        {
            switch (viewName)
            {
                case "PatientRegistration":
                    MainContent.Content = new PatientRegistration();
                    break;
                case "AppointmentConfirmation":
                    MainContent.Content = new AppointmentConfirmation();

                    break;
                case "PatientDashboard":
                    MainContent.Content = new PatientDashboard();

                    break;
            }
        }
    }
}






_-------------_--------_--------_----------_-------------




Updated ViewModels

PatientRegistrationViewModel

Ensure the PatientRegistered event is raised with the registered patient data.

using System;
using System.Collections.ObjectModel;
using PatientManagementApp.Models;
using PatientManagementApp.Services;

namespace PatientManagementApp.ViewModels
{
    public class PatientRegistrationViewModel
    {
        private readonly PatientDataService _patientDataService;

        public ObservableCollection<Patient> Patients => _patientDataService.Patients;
        public event EventHandler<Patient> PatientRegistered;

        public PatientRegistrationViewModel(PatientDataService patientDataService)
        {
            _patientDataService = patientDataService;
        }

        public void RegisterPatient(Patient patient)
        {
            _patientDataService.Patients.Add(patient);
            PatientRegistered?.Invoke(this, patient);
        }
    }
}

AppointmentConfirmationViewModel

Add an event to notify the selection of a confirmed patient.

using System;
using System.Collections.ObjectModel;
using PatientManagementApp.Models;
using PatientManagementApp.Services;

namespace PatientManagementApp.ViewModels
{
    public class AppointmentConfirmationViewModel
    {
        private readonly PatientDataService _patientDataService;

        public ObservableCollection<Patient> Patients => _patientDataService.Patients;
        public Patient SelectedPatient { get; set; }
        public event EventHandler<Patient> AppointmentConfirmed;

        public AppointmentConfirmationViewModel(PatientDataService patientDataService)
        {
            _patientDataService = patientDataService;
        }

        public void ConfirmAppointment()
        {
            if (SelectedPatient != null)
            {
                AppointmentConfirmed?.Invoke(this, SelectedPatient);
            }
        }
    }
}

PatientDashboardViewModel

Handle the event from the AppointmentConfirmationViewModel to update the dashboard.

using System.Collections.ObjectModel;
using PatientManagementApp.Models;

namespace PatientManagementApp.ViewModels
{
    public class PatientDashboardViewModel
    {
        public ObservableCollection<Patient> ConfirmedAppointments { get; set; }

        public PatientDashboardViewModel()
        {
            ConfirmedAppointments = new ObservableCollection<Patient>();
        }

        public void OnAppointmentConfirmed(object sender, Patient patient)
        {
            if (patient != null && !ConfirmedAppointments.Contains(patient))
            {
                ConfirmedAppointments.Add(patient);
            }
        }
    }
}

MainWindow Setup

Modify MainWindow.xaml.cs to wire up the events between ViewModels.

namespace PatientManagementApp
{
    public partial class MainWindow : Window
    {
        private readonly MainWindowViewModel _viewModel;
        private readonly PatientDataService _patientDataService;
        private readonly AppointmentConfirmationViewModel _appointmentConfirmationViewModel;
        private readonly PatientDashboardViewModel _patientDashboardViewModel;

        public MainWindow()
        {
            InitializeComponent();
            _patientDataService = new PatientDataService();
            _viewModel = new MainWindowViewModel();
            _appointmentConfirmationViewModel = new AppointmentConfirmationViewModel(_patientDataService);
            _patientDashboardViewModel = new PatientDashboardViewModel();

            _viewModel.NavigationRequested += OnNavigationRequested;

            // Wire up event handling
            _appointmentConfirmationViewModel.AppointmentConfirmed += _patientDashboardViewModel.OnAppointmentConfirmed;
        }

        private void OnNavigationRequested(object sender, string viewName)
        {
            switch (viewName)
            {
                case "PatientRegistration":
                    var registrationViewModel = new PatientRegistrationViewModel(_patientDataService);
                    registrationViewModel.PatientRegistered += OnPatientRegistered;
                    MainContent.Content = new PatientRegistration
                    {
                        DataContext = registrationViewModel
                    };
                    break;
                case "AppointmentConfirmation":
                    MainContent.Content = new AppointmentConfirmation
                    {
                        DataContext = _appointmentConfirmationViewModel
                    };
                    break;
                case "PatientDashboard":
                    MainContent.Content = new PatientDashboard
                    {
                        DataContext = _patientDashboardViewModel
                    };
                    break;
            }
        }

        private void OnPatientRegistered(object sender, Patient patient)
        {
            // Optionally handle any additional logic when a patient is registered.
        }
    }
}

UserControl XAML and Code-Behind

AppointmentConfirmation.xaml.cs

Add an event handler for the button click.

private void ConfirmAppointmentButton_Click(object sender, RoutedEventArgs e)
{
    if (DataContext is AppointmentConfirmationViewModel viewModel)
    {
        viewModel.ConfirmAppointment();
    }
}

AppointmentConfirmation.xaml

Bind the SelectedItem property to SelectedPatient and wire up the button event.

<UserControl x:Class="PatientManagementApp.UserControls.AppointmentConfirmation"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Grid>
        <DataGrid ItemsSource="{Binding Patients}" 
                  SelectedItem="{Binding SelectedPatient}" 
                  AutoGenerateColumns="True" />
        <Button Content="Confirm Appointment" 
                Click="ConfirmAppointmentButton_Click" 
                Margin="10" VerticalAlignment="Bottom" />
    </Grid>
</UserControl>

Result

1. Registered patients are shown on the AppointmentConfirmation page.


2. Selecting a patient and clicking the "Confirm Appointment" button raises an event that updates the PatientDashboard.


3. The PatientDashboard displays the confirmed patients, all through event handling without using commands or data bindings.






