RelayCommand.cs (if not already defined)
------------------------------------


using System;
using System.Windows.Input;

namespace PatientAdmissionApp
{
    public class RelayCommand : ICommand
    {
        private readonly Action<object> _execute;
        private readonly Predicate<object> _canExecute;

        public RelayCommand(Action<object> execute, Predicate<object> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute(parameter);
        }

        public void Execute(object parameter)
        {
            _execute(parameter);
        }

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
    }
}


MainWindowViewModel.cs (with event subscription)
---------------------------------------------------


public class MainWindowViewModel : BaseViewModel
{
    private BaseViewModel _currentViewModel;
    private readonly PatientRegistrationControlViewModel _registrationViewModel;
    private readonly AppointmentControlViewModel _appointmentViewModel;
    private readonly PatientDashboardViewModel _dashboardViewModel;

    public BaseViewModel CurrentViewModel
    {
        get => _currentViewModel;
        set { _currentViewModel = value; OnPropertyChanged(); }
    }

    public ICommand ShowRegistrationCommand { get; }
    public ICommand ShowAppointmentCommand { get; }
    public ICommand ShowDashboardCommand { get; }
    public ICommand ExitCommand { get; }

    public MainWindowViewModel()
    {
        _registrationViewModel = new PatientRegistrationControlViewModel();
        _appointmentViewModel = new AppointmentControlViewModel();
        _dashboardViewModel = new PatientDashboardViewModel();

        // Event handling setup
        _registrationViewModel.PatientRegistered += OnPatientRegistered;
        _appointmentViewModel.AppointmentUpdated += OnAppointmentUpdated;

        ShowRegistrationCommand = new RelayCommand(ShowRegistration);
        ShowAppointmentCommand = new RelayCommand(ShowAppointment);
        ShowDashboardCommand = new RelayCommand(ShowDashboard);
        ExitCommand = new RelayCommand(_ => System.Windows.Application.Current.Shutdown());

        ShowRegistration(null); // Default view
    }

    private void OnPatientRegistered(object sender, PatientModel e)
    {
        _appointmentViewModel.Patients.Add(e);
        _dashboardViewModel.AddConfirmedPatient(e);
    }

    private void OnAppointmentUpdated(object sender, EventArgs e)
    {
        // Additional logic for when an appointment is updated
    }

    private void ShowRegistration(object parameter)
    {
        CurrentViewModel = _registrationViewModel;
    }

    private void ShowAppointment(object parameter)
    {
        CurrentViewModel = _appointmentViewModel;
    }

    private void ShowDashboard(object parameter)
    {
        CurrentViewModel = _dashboardViewModel;
    }
}

PatientRegistrationControlViewModel.cs (with RelayCommand for event triggering)
-------------------------------------------------

csharp
Copy code
public class PatientRegistrationControlViewModel : BaseViewModel
{
    public ObservableCollection<PatientModel> Patients { get; set; }
    public PatientModel NewPatient { get; set; }

    public event EventHandler<PatientModel> PatientRegistered;

    public ICommand RegisterPatientCommand { get; }

    public PatientRegistrationControlViewModel()
    {
        Patients = new ObservableCollection<PatientModel>();
        NewPatient = new PatientModel();
        RegisterPatientCommand = new RelayCommand(RegisterPatient);
    }

    private void RegisterPatient(object parameter)
    {
        if (!string.IsNullOrEmpty(NewPatient.Name) && NewPatient.Dateofbirth != default)
        {
            var newPatient = new PatientModel
            {
                Name = NewPatient.Name,
                Dateofbirth = NewPatient.Dateofbirth,
                Age = DateTime.Now.Year - NewPatient.Dateofbirth.Year,
                Address = NewPatient.Address,
                Slot = NewPatient.Slot,
                BookingDate = NewPatient.BookingDate
            };

            Patients.Add(newPatient);
            PatientRegistered?.Invoke(this, newPatient);

            MessageBox.Show($"Patient {NewPatient.Name} registered successfully.");
            NewPatient = new PatientModel();
            OnPropertyChanged(nameof(NewPatient));
        }
        else
        {
            MessageBox.Show("Please provide valid patient details.");
        }
    }
}

AppointmentControlViewModel.cs (with event triggering)
--------------------------------------

csharp
Copy code
public class AppointmentControlViewModel : BaseViewModel
{
    public ObservableCollection<PatientModel> Patients { get; set; }
    public PatientModel SelectedPatient { get; set; }

    public event EventHandler AppointmentUpdated;

    public ICommand UpdateAppointmentCommand { get; }

    public AppointmentControlViewModel()
    {
        Patients = new ObservableCollection<PatientModel>();
        UpdateAppointmentCommand = new RelayCommand(param => UpdateAppointment(SelectedPatient));
    }

    public void UpdateAppointment(PatientModel patient)
    {
        if (patient != null)
        {
            patient.ConfirmationStatus = "Confirmed";
            OnPropertyChanged(nameof(Patients));
            AppointmentUpdated?.Invoke(this, EventArgs.Empty);
        }
    }
}
These updates ensure that event handling and RelayCommand are integrated across the application for proper event-driven interaction and command functionality.




Model
PatientModel.cs
-------------------------

csharp
Copy code
using System;

namespace PatientAdmissionApp
{
    public class PatientModel
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public DateTime Dateofbirth { get; set; } = DateTime.Now;
        public string Address { get; set; }
        public string BookingDate { get; set; }
        public string AppointmentDate { get; set; }
        public string ConfirmationStatus { get; set; } = "Pending";
        public string Slot { get; set; }
    }
}

Interface
IPatient.cs
----------------

csharp
Copy code
using System.Collections.ObjectModel;

namespace PatientAdmissionApp
{
    public interface IPatient
    {
        ObservableCollection<PatientModel> Patients { get; }
        void RegisterPatient(object parameter);
        void SendUpdate(object parameter);
    }
}

ViewModels
BaseViewModel.cs
---------------------

csharp
Copy code
using System.ComponentModel;

namespace PatientAdmissionApp
{
    public class BaseViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}

MainWindowViewModel.cs
-------------------------

csharp
Copy code
using System.Windows.Input;

namespace PatientAdmissionApp
{
    public class MainWindowViewModel : BaseViewModel
    {
        private BaseViewModel _currentViewModel;
        public BaseViewModel CurrentViewModel
        {
            get => _currentViewModel;
            set { _currentViewModel = value; OnPropertyChanged(); }
        }

        public ICommand ShowRegistrationCommand { get; }
        public ICommand ShowAppointmentCommand { get; }
        public ICommand ShowDashboardCommand { get; }
        public ICommand ExitCommand { get; }

        public MainWindowViewModel()
        {
            ShowRegistrationCommand = new RelayCommand(ShowRegistration);
            ShowAppointmentCommand = new RelayCommand(ShowAppointment);
            ShowDashboardCommand = new RelayCommand(ShowDashboard);
            ExitCommand = new RelayCommand(_ => System.Windows.Application.Current.Shutdown());

            ShowRegistration(null); // Default view
        }

        private void ShowRegistration(object parameter)
        {
            CurrentViewModel = new PatientRegistrationControlViewModel();
        }

        private void ShowAppointment(object parameter)
        {
            CurrentViewModel = new AppointmentControlViewModel();
        }

        private void ShowDashboard(object parameter)
        {
            CurrentViewModel = new PatientDashboardViewModel();
        }
    }
}

PatientRegistrationControlViewModel.cs
-------------------------------------

csharp
Copy code
using System.Collections.ObjectModel;
using System.Windows;

namespace PatientAdmissionApp
{
    public class PatientRegistrationControlViewModel : BaseViewModel
    {
        public ObservableCollection<PatientModel> Patients { get; set; }
        public PatientModel NewPatient { get; set; }

        public event EventHandler<PatientModel> PatientRegistered;

        public ICommand RegisterPatientCommand { get; }

        public PatientRegistrationControlViewModel()
        {
            Patients = new ObservableCollection<PatientModel>();
            NewPatient = new PatientModel();
            RegisterPatientCommand = new RelayCommand(RegisterPatient);
        }

        private void RegisterPatient(object parameter)
        {
            if (!string.IsNullOrEmpty(NewPatient.Name) && NewPatient.Dateofbirth != default)
            {
                Patients.Add(new PatientModel
                {
                    Name = NewPatient.Name,
                    Dateofbirth = NewPatient.Dateofbirth,
                    Age = DateTime.Now.Year - NewPatient.Dateofbirth.Year,
                    Address = NewPatient.Address,
                    Slot = NewPatient.Slot,
                    BookingDate = NewPatient.BookingDate
                });

                PatientRegistered?.Invoke(this, NewPatient);
                MessageBox.Show($"Patient {NewPatient.Name} registered successfully.");
                NewPatient = new PatientModel();
                OnPropertyChanged(nameof(NewPatient));
            }
            else
            {
                MessageBox.Show("Please provide valid patient details.");
            }
        }
    }
}

AppointmentControlViewModel.cs
-------------------------------

csharp
Copy code
using System.Collections.ObjectModel;

namespace PatientAdmissionApp
{
    public class AppointmentControlViewModel : BaseViewModel
    {
        public ObservableCollection<PatientModel> Patients { get; set; }
        public PatientModel SelectedPatient { get; set; }

        public event EventHandler AppointmentUpdated;

        public AppointmentControlViewModel()
        {
            Patients = new ObservableCollection<PatientModel>();
        }

        public void UpdateAppointment(PatientModel patient)
        {
            if (patient != null)
            {
                patient.ConfirmationStatus = "Confirmed";
                OnPropertyChanged(nameof(Patients));
                AppointmentUpdated?.Invoke(this, EventArgs.Empty);
            }
        }
    }
}

PatientDashboardViewModel.cs
----------------------------

csharp
Copy code
using System.Collections.ObjectModel;

namespace PatientAdmissionApp
{
    public class PatientDashboardViewModel : BaseViewModel
    {
        public ObservableCollection<PatientModel> ConfirmedPatients { get; set; }

        public PatientDashboardViewModel()
        {
            ConfirmedPatients = new ObservableCollection<PatientModel>();
        }

        public void AddConfirmedPatient(PatientModel patient)
        {
            if (patient != null && !ConfirmedPatients.Contains(patient))
            {
                ConfirmedPatients.Add(patient);
                OnPropertyChanged(nameof(ConfirmedPatients));
            }
        }
    }
}

Views
MainWindow.xaml.cs
----------------------

csharp
Copy code
using System.Windows;

namespace PatientAdmissionApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainWindowViewModel();
        }
    }
}



------------------------------------------------------------------------------------------------------------------------------------





1. MainWindowViewModel.cs

Contains RelayCommand for view navigation.
Maintains event handling for updating the registration, appointment, and dashboard logic.
csharp
Copy code
public class MainWindowViewModel : BaseViewModel
{
    private BaseViewModel _currentViewModel;
    private readonly PatientRegistrationControlViewModel _registrationViewModel;
    private readonly AppointmentControlViewModel _appointmentViewModel;
    private readonly PatientDashboardViewModel _dashboardViewModel;

    public BaseViewModel CurrentViewModel
    {
        get => _currentViewModel;
        set { _currentViewModel = value; OnPropertyChanged(); }
    }

    public ICommand ShowRegistrationCommand { get; }
    public ICommand ShowAppointmentCommand { get; }
    public ICommand ShowDashboardCommand { get; }
    public ICommand ExitCommand { get; }

    public MainWindowViewModel()
    {
        _registrationViewModel = new PatientRegistrationControlViewModel();
        _appointmentViewModel = new AppointmentControlViewModel();
        _dashboardViewModel = new PatientDashboardViewModel();

        // Event subscriptions
        _registrationViewModel.PatientRegistered += OnPatientRegistered;
        _appointmentViewModel.PatientConfirmed += OnPatientConfirmed;

        ShowRegistrationCommand = new RelayCommand(ShowRegistration);
        ShowAppointmentCommand = new RelayCommand(ShowAppointment);
        ShowDashboardCommand = new RelayCommand(ShowDashboard);
        ExitCommand = new RelayCommand(_ => System.Windows.Application.Current.Shutdown());

        // Set default view
        ShowRegistration(null);
    }

    private void OnPatientRegistered(object sender, PatientModel e)
    {
        _appointmentViewModel.Patients.Add(e);
    }

    private void OnPatientConfirmed(object sender, PatientModel e)
    {
        _dashboardViewModel.AddConfirmedPatient(e);
    }

    private void ShowRegistration(object parameter) => CurrentViewModel = _registrationViewModel;
    private void ShowAppointment(object parameter) => CurrentViewModel = _appointmentViewModel;
    private void ShowDashboard(object parameter) => CurrentViewModel = _dashboardViewModel;
}
2. PatientRegistrationControlViewModel.cs

Handles the registration logic and triggers an event when a patient is registered.
csharp
Copy code
public class PatientRegistrationControlViewModel : BaseViewModel
{
    public event EventHandler<PatientModel> PatientRegistered;

    public ObservableCollection<PatientModel> Patients { get; set; }
    public PatientModel NewPatient { get; set; }

    public PatientRegistrationControlViewModel()
    {
        Patients = new ObservableCollection<PatientModel>();
        NewPatient = new PatientModel();
    }

    public void RegisterPatient()
    {
        if (!string.IsNullOrEmpty(NewPatient.Name) && NewPatient.Dateofbirth != default)
        {
            var registeredPatient = new PatientModel
            {
                Name = NewPatient.Name,
                Dateofbirth = NewPatient.Dateofbirth,
                Age = DateTime.Now.Year - NewPatient.Dateofbirth.Year,
                Address = NewPatient.Address,
                Slot = NewPatient.Slot,
                BookingDate = NewPatient.BookingDate
            };
            Patients.Add(registeredPatient);
            PatientRegistered?.Invoke(this, registeredPatient);
            MessageBox.Show($"Patient {NewPatient.Name} registered successfully.");
            NewPatient = new PatientModel();
        }
        else
        {
            MessageBox.Show("Please provide valid patient details.");
        }
    }
}
3. AppointmentControlViewModel.cs

Listens for row selection and triggers an event for confirmation.
csharp
Copy code
public class AppointmentControlViewModel : BaseViewModel
{
    public event EventHandler<PatientModel> PatientConfirmed;

    public ObservableCollection<PatientModel> Patients { get; set; }
    public PatientModel SelectedPatient { get; set; }

    public AppointmentControlViewModel()
    {
        Patients = new ObservableCollection<PatientModel>();
    }

    public void ConfirmAppointment()
    {
        if (SelectedPatient != null)
        {
            SelectedPatient.ConfirmationStatus = "Confirmed";
            PatientConfirmed?.Invoke(this, SelectedPatient);
            MessageBox.Show($"Appointment confirmed for {SelectedPatient.Name}");
        }
        else
        {
            MessageBox.Show("Please select a patient.");
        }
    }
}
4. PatientDashboardViewModel.cs

Handles the logic for displaying confirmed patients.
csharp
Copy code
public class PatientDashboardViewModel : BaseViewModel
{
    public ObservableCollection<PatientModel> ConfirmedPatients { get; set; }

    public PatientDashboardViewModel()
    {
        ConfirmedPatients = new ObservableCollection<PatientModel>();
    }

    public void AddConfirmedPatient(PatientModel patient)
    {
        if (patient != null && !ConfirmedPatients.Contains(patient))
        {
            ConfirmedPatients.Add(patient);
            OnPropertyChanged(nameof(ConfirmedPatients));
        }
    }
}
5. MainWindow.xaml

Bind the RelayCommand to buttons for navigation.
xml
Copy code
<Window x:Class="PatientAdmissionApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Patient Admission App" Height="450" Width="800">
    <Grid>
        <StackPanel Orientation="Horizontal">
            <Button Content="Registration" Command="{Binding ShowRegistrationCommand}" />
            <Button Content="Appointment" Command="{Binding ShowAppointmentCommand}" />
            <Button Content="Dashboard" Command="{Binding ShowDashboardCommand}" />
        </StackPanel>
        <ContentControl Content="{Binding CurrentViewModel}" />
    </Grid>
</Window>









________________________________--_$$&____&----&_$$___________________&&&&&&______________

Here is the complete implementation, including all ViewModel logic and xaml.cs code for the pages, using event handling and RelayCommand where appropriate to meet your requirements.


---

Folder Structure

1. View: Contains MainWindow.xaml and MainWindow.xaml.cs.


2. UserControl: Contains RegistrationPage.xaml and RegistrationPage.xaml.cs, AppointmentPage.xaml and AppointmentPage.xaml.cs, and DashboardPage.xaml and DashboardPage.xaml.cs.


3. ViewModel: Contains MainWindowViewModel.cs, RegistrationViewModel.cs, AppointmentViewModel.cs, and DashboardViewModel.cs.


4. Interface: Contains IPatient.cs.


5. Model: Contains Patient.cs.


6. Command: Contains RelayCommand.cs.




---

1. RelayCommand.cs (Command Folder)

This class implements ICommand and will be used to bind button clicks to methods in the ViewModel.

using System;
using System.Windows.Input;

public class RelayCommand : ICommand
{
    private readonly Action<object> _execute;
    private readonly Func<object, bool> _canExecute;

    public RelayCommand(Action<object> execute, Func<object, bool> canExecute = null)
    {
        _execute = execute;
        _canExecute = canExecute;
    }

    public bool CanExecute(object parameter) => _canExecute == null || _canExecute(parameter);

    public void Execute(object parameter) => _execute(parameter);

    public event EventHandler CanExecuteChanged
    {
        add => CommandManager.RequerySuggested += value;
        remove => CommandManager.RequerySuggested -= value;
    }
}


---

2. IPatient.cs (Interface Folder)

public interface IPatient
{
    string Name { get; set; }
    int Age { get; set; }
    string Gender { get; set; }
    string ContactNumber { get; set; }
}


---

3. Patient.cs (Model Folder)

public class Patient : IPatient
{
    public string Name { get; set; }
    public int Age { get; set; }
    public string Gender { get; set; }
    public string ContactNumber { get; set; }
}


---

4. MainWindow.xaml (View Folder)

<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <StackPanel Orientation="Vertical" Name="NavigationPanel">
            <Button Content="Register Patient" Command="{Binding ShowRegistrationCommand}" />
            <Button Content="Appointment" Command="{Binding ShowAppointmentCommand}" />
            <Button Content="Dashboard" Command="{Binding ShowDashboardCommand}" />
        </StackPanel>
        <ContentControl Name="ContentArea" />
    </Grid>
</Window>


---

5. MainWindow.xaml.cs

using System.Windows;

public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        DataContext = new MainWindowViewModel();
    }
}


---

6. MainWindowViewModel.cs (ViewModel Folder)

using System.Windows;

public class MainWindowViewModel
{
    public RelayCommand ShowRegistrationCommand { get; }
    public RelayCommand ShowAppointmentCommand { get; }
    public RelayCommand ShowDashboardCommand { get; }

    public MainWindowViewModel()
    {
        ShowRegistrationCommand = new RelayCommand(_ => ShowRegistration());
        ShowAppointmentCommand = new RelayCommand(_ => ShowAppointment());
        ShowDashboardCommand = new RelayCommand(_ => ShowDashboard());
    }

    private void ShowRegistration()
    {
        Application.Current.MainWindow.ContentArea.Content = new RegistrationPage();
    }

    private void ShowAppointment()
    {
        Application.Current.MainWindow.ContentArea.Content = new AppointmentPage();
    }

    private void ShowDashboard()
    {
        Application.Current.MainWindow.ContentArea.Content = new DashboardPage();
    }
}


---

7. RegistrationPage.xaml (UserControl Folder)

<UserControl x:Class="YourNamespace.RegistrationPage"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <StackPanel>
        <TextBox Name="PatientName" PlaceholderText="Enter Name" />
        <TextBox Name="PatientAge" PlaceholderText="Enter Age" />
        <TextBox Name="PatientGender" PlaceholderText="Enter Gender" />
        <TextBox Name="PatientContact" PlaceholderText="Enter Contact" />
        <Button Content="Register" Command="{Binding RegisterPatientCommand}" />
    </StackPanel>
</UserControl>


---

8. RegistrationPage.xaml.cs

using System.Windows.Controls;

public partial class RegistrationPage : UserControl
{
    public RegistrationPage()
    {
        InitializeComponent();
        DataContext = new RegistrationViewModel();
    }
}


---

9. RegistrationViewModel.cs (ViewModel Folder)

using System;

public class RegistrationViewModel
{
    public event Action<Patient> PatientRegistered;

    public RelayCommand RegisterPatientCommand { get; }

    public RegistrationViewModel()
    {
        RegisterPatientCommand = new RelayCommand(_ => RegisterPatient());
    }

    private void RegisterPatient()
    {
        var patient = new Patient
        {
            Name = "Test Patient", // Replace with actual binding logic
            Age = 25,
            Gender = "Male",
            ContactNumber = "1234567890"
        };

        PatientRegistered?.Invoke(patient);
    }
}


---

10. AppointmentPage.xaml (UserControl Folder)

<UserControl x:Class="YourNamespace.AppointmentPage"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <StackPanel>
        <ListBox Name="PatientList" />
        <Button Content="Confirm Appointment" Command="{Binding ConfirmAppointmentCommand}" />
    </StackPanel>
</UserControl>


---

11. AppointmentPage.xaml.cs

using System.Windows.Controls;

public partial class AppointmentPage : UserControl
{
    public AppointmentPage()
    {
        InitializeComponent();
        DataContext = new AppointmentViewModel();
    }
}


---

12. AppointmentViewModel.cs (ViewModel Folder)

using System;

public class AppointmentViewModel
{
    public event Action<Patient> AppointmentConfirmed;

    public RelayCommand ConfirmAppointmentCommand { get; }

    public AppointmentViewModel()
    {
        ConfirmAppointmentCommand = new RelayCommand(_ => ConfirmAppointment());
    }

    private void ConfirmAppointment()
    {
        var patient = new Patient(); // Replace with selected patient from list
        AppointmentConfirmed?.Invoke(patient);
    }
}


---

13. DashboardPage.xaml (UserControl Folder)

<UserControl x:Class="YourNamespace.DashboardPage"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <DataGrid Name="PatientGrid" />
</UserControl>


---

14. DashboardPage.xaml.cs

using System.Windows.Controls;

public partial class DashboardPage : UserControl
{
    public DashboardPage()
    {
        InitializeComponent();
        DataContext = new DashboardViewModel();
    }
}


---

15. DashboardViewModel.cs (ViewModel Folder)

using System.Collections.ObjectModel;

public class DashboardViewModel
{
    public ObservableCollection<Patient> Patients { get; } = new ObservableCollection<Patient>();

    public void AddPatient(Patient patient)
    {
        Patients.Add(patient);
    }
}


---

Let me know if further clarification or adjustments are required!








